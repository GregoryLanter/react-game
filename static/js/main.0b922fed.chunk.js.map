{"version":3,"sources":["components/Header/index.js","components/FriendCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","id","response","score","topScore","FriendCard","handleScore","_this","setScoreCallBack","onClick","this","src","image","alt","name","clicked","React","Component","Wrapper","children","App","state","initialState","setScore","play","tempTopScore","resetBuilder","setState","newPalObj","krustyPals","newClickedArr","pal","display","console","log","newDisplay","used","newPosi","length","Math","floor","random","indexOf","push","_this2","components_Wrapper","components_Header","map","components_FriendCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b922fed.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction Header(props) {\n  return (\n    <header className=\"navbar\">\n      <h1 id=\"title\">Krusty's Clown Memory</h1>\n      <h1 id=\"response\">{props.response}</h1>\n      <h1 id=\"score\">Score: {props.score} | Top Score {props.topScore}</h1>   \n    </header>\n\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nclass FriendCard extends React.Component {\n/*  state = {\n    clicked: \"Not Clicked\"\n  };*/\n\n  handleScore = () => {\n    //this.setState({id: 1});\n    this.props.setScoreCallBack(this.props.id);\n  }\n\n  render() {\n    return (\n      <div className=\"card\" onClick={this.handleScore}>\n        <div className=\"img-container\">\n          <img src={this.props.image} alt={this.props.name}/>\n          <p>{this.props.id} - {this.props.clicked}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","  import React, { Component } from \"react\";\n  import Header from \"./components/Header\";\n  \n  import './App.css';\n  import FriendCard from \"./components/FriendCard\";\n  import Wrapper from \"./components/Wrapper\";\n  import krustyPals from \"./krustyPals.json\"\n  \n  class App extends Component {\n  \n    state = this.initialState;\n    get initialState() {\n      return {\n        response: \"Click an image below to begin!\",\n        score: 0,\n        topScore: 0,\n        krustyPals: krustyPals,\n        display: krustyPals,\n        clicked: [\"Not Clicked\", \"Not Clicked\", \"Not Clicked\", \"Not Clicked\", \"Not Clicked\", \"Not Clicked\", \"Not Clicked\", \"Not Clicked\", \"Not Clicked\", \"Not Clicked\", \"Not Clicked\", \"Not Clicked\"],\n        play: \"Playing\"\n      }\n    }\n  \n    resetBuilder() {\n      this.setState(this.initialState);\n    }\n  \n  \n    setScore = (clicked) => {\n  \n      if (this.state.play !== \"Playing\") {\n        let tempTopScore = this.state.topScore;\n        this.resetBuilder();\n        //      this.resetClicked();\n        this.setState({ topScore: tempTopScore, response: \"Click an image to begin!\" });\n      } else {\n  \n        if (this.state.clicked[clicked - 1] === \"Clicked\") {\n          this.setState({ response: \"Sorry No, Gave Over!\" })\n          this.setState({ play: \"Over\" })\n        } else {\n          let newPalObj = this.state.krustyPals;\n          let newClickedArr = this.state.clicked;\n          for (let pal = 0; pal < 12; pal++) {\n            if (pal === (clicked - 1)) {\n              newPalObj[pal].clicked = \"Clicked\";\n              newClickedArr[pal] = \"Clicked\"\n            } else {\n              newPalObj[pal].clicked = this.state.clicked[newPalObj[pal].id - 1];\n            }\n          }\n          this.setState({ display: newPalObj });\n          this.setState({ clicked: newClickedArr });\n  \n          this.setState({ score: this.state.score + 1 }, () => {\n            if (this.state.score >= this.state.topScore) {\n              this.setState({ topScore: this.state.score }, () => {\n                if(this.state.score === 12){\n                  console.log(\"Winner\");\n                  this.setState({response: \"YOU WIN!!!\"}, () => {\n                    this.setState({play: \"Over\"});\n                  });\n                }\n              });\n            }\n            this.setState({ response: \"CORRECT!!! Keep guessing\" });\n          });\n\n\n          //randomize\n          let newDisplay = [];\n          let used = [];\n          let newPosi = -1;\n          while (used.length < this.state.display.length) {\n            newPosi = Math.floor(Math.random() * 11);\n            while (used.indexOf(newPosi) !== -1) {\n              newPosi++;\n              if (newPosi > 11) newPosi = 0;\n            }\n            newDisplay.push(this.state.display[newPosi]);\n            used.push(newPosi);\n          }\n          this.setState({ display: newDisplay });\n        }\n      }\n    }\n  \n  \n    render() {\n      return (\n        <Wrapper>\n          <Header response={this.state.response} score={this.state.score} topScore={this.state.topScore} />\n          {this.state.display.map(pal => (\n            <FriendCard\n              setScoreCallBack={this.setScore}\n              image={pal.image}\n              clicked={pal.clicked}\n              id={pal.id}\n              name={pal.name}\n            />\n          ))}\n        </Wrapper>\n      );\n    }\n  }\n  \n  export default App;\n  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}